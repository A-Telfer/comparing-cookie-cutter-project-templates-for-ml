{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Template Comparison","text":"<p>This repo compares project structures for ML/AI</p> <ul> <li>CCDS: Cookie Cutter Data Science</li> <li>CML: Continuous Machine Learning</li> <li>ZenML: Zen Machine Learning</li> <li>MLOpsPython: Microsoft MLOps Python</li> <li>\"-\" indicates the technology is not used or not explicitly mentioned in the repository</li> </ul>"},{"location":"#technology-comparisons","title":"Technology Comparisons","text":"Technology CCDS CML MLOpsPython ZenML CCDS UK Gov CCDS MLOPs fmind CCDS MLOPs chim50 Programming Languages Python 3.10 Node.js &gt;=16.0.0 Python 3.7.5 Python &gt;=3.9, &lt;3.13 Python 3 Python 3.13 Python 3 Dependency Management pyproject.toml npm Conda Poetry requirements.txt pyproject.toml requirements.txt Build Tools Makefile npm scripts Makefile Poetry Makefile just Makefile Containerization - Docker (CI/CD) Docker Docker - Docker - CI/CD GitHub Actions GitHub Actions Azure Pipelines GitHub Actions GitHub Actions GitHub Actions GitHub Actions Testing pytest jest pytest pytest - pytest - Linting ruff eslint/prettier - ruff flake8 ruff flake8 Type Checking - - - mypy - mypy - Documentation - - - mkdocs Sphinx pdoc - Cloud Services - - Azure AWS/GCP/Azure AWS S3 - AWS S3 ML Tools - - - - - mlflow - Notebooks - - Jupyter Jupyter - ipykernel - CLI Framework typer yargs - click click - - Security - - - bandit detect-secrets bandit - Git Hooks - husky - pre-commit pre-commit pre-commit -"},{"location":"#folder-structure-comparisons","title":"Folder Structure Comparisons","text":"Folder CCDS CML MLOpsPython ZenML CCDS UK Gov CCDS MLOPs fmind CCDS MLOPs chim50 Source Code <code>{{ module_name }}/</code> <code>src/</code> <code>ml_service/</code> <code>src/zenml/</code> <code>src/</code> <code>src/</code> <code>src/</code> Tests - <code>tests/</code> - <code>tests/</code> - <code>tests/</code> - Data <code>data/</code> - <code>data/</code> - <code>data/</code> <code>data/</code> <code>data/</code> Notebooks <code>notebooks/</code> - <code>experimentation/</code> <code>examples/</code> <code>notebooks/</code> <code>notebooks/</code> <code>notebooks/</code> Documentation <code>docs/</code> - <code>docs/</code> <code>docs/</code> <code>docs/</code> <code>docs/</code> <code>docs/</code> Models <code>models/</code> - - - <code>models/</code> - <code>models/</code> Reports <code>reports/</code> - - - <code>reports/</code> <code>outputs/</code> <code>reports/</code> References <code>references/</code> - - - <code>references/</code> - - Configuration - - - - - <code>confs/</code> <code>configs/</code> Infrastructure - - <code>environment_setup/</code> <code>infra/</code> - - - Docker - - <code>environment_setup/</code> <code>docker/</code> - - - Helm Charts - - <code>charts/</code> <code>helm/</code> - - - Assets - <code>assets/</code> - - - - -"},{"location":"#entrypoints","title":"Entrypoints","text":"Type CCDS CML MLOpsPython ZenML CCDS UK Gov CCDS MLOPs fmind CCDS MLOPs chim50 CLI Entrypoints <code>{{ module_name }}/scripts.py</code> <code>bin/cml.js</code> <code>ml_service/pipelines/*.py</code> <code>src/zenml/cli/cli.py</code> <code>src/make_*</code> <code>src/{{ project_name }}/scripts.py</code> <code>src/data/*.py</code> Task Scripts - - <code>scripts/</code> <code>scripts/</code> - <code>tasks/*.just</code> - Build Scripts <code>Makefile</code> <code>package.json</code> <code>Makefile</code> <code>pyproject.toml</code> <code>Makefile</code> <code>justfile</code> <code>Makefile</code> CI/CD Scripts <code>.github/</code> <code>.github/</code> <code>.pipelines/</code> <code>.github/</code> <code>.github/</code> <code>.github/</code> <code>.github/</code> Docker Scripts - <code>Dockerfile</code> <code>environment_setup/Dockerfile</code> <code>docker/*.Dockerfile</code> - <code>Dockerfile</code> - Infrastructure Scripts - - <code>environment_setup/*.yml</code> <code>infra/</code> - - - Utility Scripts - <code>bin/</code> <code>ml_service/util/</code> <code>scripts/</code> <code>src/tools/</code> - -"},{"location":"#separaton-of-traintest","title":"Separaton of Train/Test","text":"<p>Separation Patterns:</p> <ol> <li>Module-Based Separation:</li> <li>CCDS: Separate <code>train.py</code> and <code>predict.py</code> in <code>modeling/</code></li> <li> <p>CCDS MLOPs chim50: Separate <code>train.py</code> and <code>predict.py</code> in <code>models/model1/</code></p> </li> <li> <p>Directory-Based Separation:</p> </li> <li>MLOpsPython: Separate <code>training/</code> and <code>scoring/</code> directories</li> <li> <p>ZenML: Example-based separation in <code>examples/</code></p> </li> <li> <p>Combined Approach:</p> </li> <li>CCDS MLOPs fmind: Combined in <code>scripts.py</code></li> <li> <p>CCDS UK Gov: No explicit inference</p> </li> <li> <p>N/A:</p> </li> <li>CML: CLI tool, no training/inference</li> </ol>"},{"location":"proposed_structures/","title":"Project Structures","text":""},{"location":"proposed_structures/#integrated-structure","title":"Integrated Structure","text":"<pre><code>{{ your_repo }}\n\u251c\u2500\u2500 compose.dev.yml\n\u251c\u2500\u2500 configs\n\u2502   \u251c\u2500\u2500 test.yaml\n\u2502   \u2514\u2500\u2500 train.yaml\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 local\n\u251c\u2500\u2500 mlruns\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 reports\n\u251c\u2500\u2500 secrets\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 your_project\n\u2502       \u251c\u2500\u2500 _constants.py\n\u2502       \u251c\u2500\u2500 entrypoints\n\u2502       \u2502   \u251c\u2500\u2500 infer.py\n\u2502       \u2502   \u2514\u2500\u2500 train.py\n\u2502       \u251c\u2500\u2500 infer_settings.py\n\u2502       \u251c\u2500\u2500 logger_setup.py\n\u2502       \u251c\u2500\u2500 models\n\u2502       \u2502   \u251c\u2500\u2500 model_a.py\n\u2502       \u2502   \u2514\u2500\u2500 model_b.py\n\u2502       \u251c\u2500\u2500 pipeline\n\u2502       \u2502   \u251c\u2500\u2500 features.py\n\u2502       \u2502   \u251c\u2500\u2500 fetch.py\n\u2502       \u2502   \u251c\u2500\u2500 push.py\n\u2502       \u2502   \u2514\u2500\u2500 subscribe.py\n\u2502       \u251c\u2500\u2500 train_settings.py\n\u2502       \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"proposed_structures/#separated-package-structure","title":"Separated-Package Structure","text":"<p>Packages might be separated for - developer convienience - code organization</p> <pre><code>{{ your_repo }}\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 compose.dev.yml\n\u251c\u2500\u2500 configs\n\u2502   \u251c\u2500\u2500 test.yaml\n\u2502   \u2514\u2500\u2500 train.yaml\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 local\n\u251c\u2500\u2500 mlruns\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 reports\n\u251c\u2500\u2500 secrets\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 project_common\n\u2502   \u2502   \u2514\u2500\u2500 logger_setup.py\n\u2502   \u251c\u2500\u2500 project_infer\n\u2502   \u2502   \u251c\u2500\u2500 data\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 features.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 fetch_data.py\n\u2502   \u2502   \u251c\u2500\u2500 entrypoints.py\n\u2502   \u2502   \u2514\u2500\u2500 settings.py\n\u2502   \u2514\u2500\u2500 project_train\n\u2502       \u251c\u2500\u2500 data\n\u2502       \u2502   \u251c\u2500\u2500 features.py\n\u2502       \u2502   \u2514\u2500\u2500 fetch_data.py\n\u2502       \u251c\u2500\u2500 data.py\n\u2502       \u251c\u2500\u2500 entrypoints.py\n\u2502       \u2514\u2500\u2500 settings.py\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 your_ml_project\n\u2502       \u251c\u2500\u2500 test_infer_settings.py\n\u2502       \u2514\u2500\u2500 test_train_settings.py\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"proposed_structures/#separated-service-structure","title":"Separated-Service Structure","text":"<p>Separate services may be needed if the deployment stack is very different between training and testing</p> <pre><code>{{ your_repo }}\n\u251c\u2500\u2500 compose.dev.yml\n\u251c\u2500\u2500 configs\n\u2502   \u251c\u2500\u2500 test.yaml\n\u2502   \u2514\u2500\u2500 train.yaml\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 local\n\u251c\u2500\u2500 mlruns\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 reports\n\u251c\u2500\u2500 secrets\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 project_test\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u251c\u2500\u2500 src\n\u2502   \u2502   \u2514\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 project_train\n\u2502       \u251c\u2500\u2500 Dockerfile\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u251c\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 tests\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"cookiecutter/CCDS/","title":"Cookie Cutter Data Science (CCDS)","text":"<p>Source: https://cookiecutter-data-science.drivendata.org   Version: 86152dd   </p> <pre><code>{{ repo name }}\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u2502\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 references\n\u251c\u2500\u2500 reports\n\u2502   \u2514\u2500\u2500 figures\n\u2502\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.cfg\n\u2514\u2500\u2500 {{ cookiecutter.module_name }}\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 config.py\n    \u251c\u2500\u2500 dataset.py\n    \u251c\u2500\u2500 features.py\n    \u251c\u2500\u2500 modeling                \n    \u2502   \u251c\u2500\u2500 __init__.py \n    \u2502   \u251c\u2500\u2500 predict.py\n    \u2502   \u2514\u2500\u2500 train.py\n    \u2502\n    \u2514\u2500\u2500 plots.py\n</code></pre>"},{"location":"cookiecutter/CCDS/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python 3.10 (specified in <code>pyproject.toml</code> and <code>Makefile</code>)</li> <li>Uses <code>pyproject.toml</code> for project configuration and dependency management</li> </ul>"},{"location":"cookiecutter/CCDS/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>loguru: For logging</li> <li>mkdocs: For documentation</li> <li>pip: For package management</li> <li>pytest: For testing</li> <li>python-dotenv: For environment variable management</li> <li>ruff: For linting and code formatting</li> <li>tqdm: For progress bars</li> <li>typer: For CLI applications</li> </ul>"},{"location":"cookiecutter/CCDS/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Makefile: For automating common tasks like:</li> <li>Installing dependencies (<code>make requirements</code>)</li> <li>Cleaning compiled Python files (<code>make clean</code>)</li> <li>Linting and formatting code (<code>make lint</code>, <code>make format</code>)</li> <li>Running tests (<code>make test</code>)</li> <li>Creating a Python virtual environment (<code>make create_environment</code>)</li> <li>Generating datasets (<code>make data</code>)</li> </ul>"},{"location":"cookiecutter/CCDS/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>ruff: Configured for linting and formatting with specific rules (e.g., import sorting)</li> <li>GitHub Actions (implied by <code>.github/</code> directory, though not inspected in detail)</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_chim50/","title":"Cookie Cutter MLOPs Chim-50","text":"<p>Source: https://github.com/Chim-SO/cookiecutter-mlops   Version: 526751d    </p> <pre><code>{{ repo_name }}\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 configs\n\u2502   \u2514\u2500\u2500 model1.yaml\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 references\n\u251c\u2500\u2500 reports\n\u2502   \u2514\u2500\u2500 figures\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 data\n    \u2502   \u251c\u2500\u2500 build_features.py\n    \u2502   \u251c\u2500\u2500 cleaning.py\n    \u2502   \u251c\u2500\u2500 ingestion.py\n    \u2502   \u251c\u2500\u2500 labeling.py\n    \u2502   \u251c\u2500\u2500 splitting.py\n    \u2502   \u2514\u2500\u2500 validation.py\n    \u251c\u2500\u2500 models\n    \u2502   \u2514\u2500\u2500 model1\n    \u2502       \u251c\u2500\u2500 dataloader.py\n    \u2502       \u251c\u2500\u2500 hyperparameters_tuning.py\n    \u2502       \u251c\u2500\u2500 model.py\n    \u2502       \u251c\u2500\u2500 predict.py\n    \u2502       \u251c\u2500\u2500 preprocessing.py\n    \u2502       \u2514\u2500\u2500 train.py\n    \u2514\u2500\u2500 visualization\n        \u251c\u2500\u2500 evaluation.py\n        \u2514\u2500\u2500 exploration.py\n</code></pre>"},{"location":"cookiecutter/CCDS_MLOPs_chim50/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python 3 (specified in <code>Makefile</code>)</li> <li>Uses <code>requirements.txt</code> for dependency management</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_chim50/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>pip, setuptools, wheel: For package management</li> <li>flake8: For linting</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_chim50/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Makefile: For automating common tasks like:</li> <li>Installing dependencies (<code>make requirements</code>)</li> <li>Generating datasets (<code>make data</code>)</li> <li>Cleaning compiled Python files (<code>make clean</code>)</li> <li>Linting code (<code>make lint</code>)</li> <li>Syncing data to/from S3 (<code>make sync_data_to_s3</code>, <code>make sync_data_from_s3</code>)</li> <li>Creating a Python virtual environment (<code>make create_environment</code>)</li> <li>Testing the Python environment (<code>make test_environment</code>)</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_chim50/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>AWS S3: For data syncing (optional, requires AWS CLI and bucket configuration)</li> <li>Conda/Virtualenv: For environment management (detected automatically)</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/","title":"Cookie Cutter MLOPs fmind","text":"<p>Source: https://github.com/fmind/cookiecutter-mlops-package   Version: b930d91</p> <pre><code>{{ repo name }}\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 confs\n\u2502   \u251c\u2500\u2500 inference.yaml\n\u2502   \u251c\u2500\u2500 training.yaml\n\u2502   \u2514\u2500\u2500 tuning.yaml\n\u251c\u2500\u2500 data\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 justfile\n\u251c\u2500\u2500 mlops-project.code-workspace\n\u251c\u2500\u2500 mlruns\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 outputs\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 {{ project_name }}\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py\n\u2502       \u2514\u2500\u2500 scripts.py\n\u251c\u2500\u2500 tasks\n\u2502   \u251c\u2500\u2500 check.just\n\u2502   \u251c\u2500\u2500 clean.just\n\u2502   \u251c\u2500\u2500 commit.just\n\u2502   \u251c\u2500\u2500 doc.just\n\u2502   \u251c\u2500\u2500 docker.just\n\u2502   \u251c\u2500\u2500 format.just\n\u2502   \u251c\u2500\u2500 install.just\n\u2502   \u251c\u2500\u2500 mlflow.just\n\u2502   \u251c\u2500\u2500 package.just\n\u2502   \u2514\u2500\u2500 project.just\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 conftest.py\n    \u2514\u2500\u2500 test_scripts.py\n</code></pre>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python 3.13 (specified in multiple config files)</li> <li>Uses <code>pyproject.toml</code> for project configuration and dependency management</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>mlflow: For experiment tracking and ML lifecycle management</li> <li>hatchling: For Python packaging and build backend</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#development-quality-tools","title":"Development &amp; Quality Tools","text":"<ul> <li>pytest (+ plugins: pytest-cov, pytest-mock, pytest-xdist): For testing</li> <li>mypy: Static type checking</li> <li>ruff: Linting and code formatting</li> <li>bandit: Security linter for Python</li> <li>coverage: Code coverage measurement</li> <li>pre-commit: Framework for managing and maintaining multi-language pre-commit hooks</li> <li>commitizen: For conventional commit messages and versioning</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#documentation-notebooks","title":"Documentation &amp; Notebooks","text":"<ul> <li>pdoc: For generating project documentation</li> <li>ipykernel, nbformat: For Jupyter notebook support</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>just: Task runner (via <code>justfile</code>)</li> <li>Docker: Containerization (Dockerfile and docker-compose)</li> <li>Uses a custom Python 3.13 image from <code>ghcr.io/astral-sh/uv</code></li> <li>Docker Compose runs an <code>mlflow</code> server container</li> </ul>"},{"location":"cookiecutter/CCDS_MLOPs_fmind/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>.pre-commit-config.yaml: Pre-commit hooks for code quality and security</li> <li>GitHub Actions (implied by <code>.github/</code> directory, though not inspected in detail)</li> <li>MLflow server: Exposed via Docker Compose on port 5000</li> </ul>"},{"location":"cookiecutter/CCDS_ukgov/","title":"UK Gov fork of CCDS","text":"<p>Source: https://github.com/ukgovdatascience/cookiecutter-data-science-gds   Version: 76841b5 - Not maintained   </p> <pre><code>{{ repo name }}\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 test_environment.py\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external\n\u2502   \u251c\u2500\u2500 interim\n\u2502   \u251c\u2500\u2500 processed\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 pull_request_template.md\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 references\n\u2502   \u251c\u2500\u2500 aqa_plan.md\n\u2502   \u2514\u2500\u2500 assumptions_log.md\n\u251c\u2500\u2500 reports\n\u2502   \u2514\u2500\u2500 figures\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 src\n   \u251c\u2500\u2500 __init__.py\n   \u251c\u2500\u2500 make_data\n   \u251c\u2500\u2500 make_features\n   \u251c\u2500\u2500 make_models\n   \u251c\u2500\u2500 make_visualisations\n   \u2514\u2500\u2500 tools\n</code></pre>"},{"location":"cookiecutter/CCDS_ukgov/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python 3 (specified in <code>Makefile</code>)</li> <li>Uses <code>requirements.txt</code> and <code>requirements-dev.txt</code> for dependency management</li> </ul>"},{"location":"cookiecutter/CCDS_ukgov/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>click: For CLI applications</li> <li>Sphinx: For documentation</li> <li>coverage: For code coverage measurement</li> <li>awscli: For AWS S3 data syncing</li> <li>flake8: For linting</li> <li>python-dotenv: For environment variable management</li> </ul>"},{"location":"cookiecutter/CCDS_ukgov/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>detect-secrets: For detecting secrets in code</li> <li>pre-commit: For managing pre-commit hooks</li> </ul>"},{"location":"cookiecutter/CCDS_ukgov/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Makefile: For automating common tasks like:</li> <li>Installing dependencies (<code>make requirements</code>)</li> <li>Generating datasets (<code>make data</code>)</li> <li>Cleaning compiled Python files (<code>make clean</code>)</li> <li>Linting code (<code>make lint</code>)</li> <li>Syncing data to/from S3 (<code>make sync_data_to_s3</code>, <code>make sync_data_from_s3</code>)</li> <li>Creating a Python virtual environment (<code>make create_environment</code>)</li> <li>Testing the Python environment (<code>make test_environment</code>)</li> </ul>"},{"location":"cookiecutter/CCDS_ukgov/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>AWS S3: For data syncing (optional, requires AWS CLI and bucket configuration)</li> <li>Conda/Virtualenv: For environment management (detected automatically)</li> </ul>"},{"location":"misc/MLOpsPython/","title":"MLOpsPython Microsoft","text":"<p>Source: https://github.com/microsoft/MLOpsPython  Version: 98a610f   </p> <pre><code>MlOpsPython\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 bootstrap\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 bootstrap.py\n\u251c\u2500\u2500 charts\n\u2502   \u251c\u2500\u2500 abtest-istio\n\u2502   \u2502   \u251c\u2500\u2500 Chart.yaml\n\u2502   \u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 istio-canary.yaml\n\u2502   \u2502   \u2514\u2500\u2500 values.yaml\n\u2502   \u251c\u2500\u2500 abtest-model\n\u2502   \u2502   \u251c\u2500\u2500 Chart.yaml\n\u2502   \u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 service.yaml\n\u2502   \u2502   \u2514\u2500\u2500 values.yaml\n\u2502   \u2514\u2500\u2500 load_test.sh\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 data_test.py\n\u2502   \u251c\u2500\u2500 diabetes.csv\n\u2502   \u251c\u2500\u2500 diabetes_bad_dist.csv\n\u2502   \u251c\u2500\u2500 diabetes_bad_schema.csv\n\u2502   \u2514\u2500\u2500 diabetes_missing_values.csv\n\u251c\u2500\u2500 diabetes_regression\n\u2502   \u251c\u2500\u2500 ci_dependencies.yml\n\u2502   \u251c\u2500\u2500 conda_dependencies.yml\n\u2502   \u251c\u2500\u2500 conda_dependencies_scorecopy.yml\n\u2502   \u251c\u2500\u2500 conda_dependencies_scoring.yml\n\u2502   \u251c\u2500\u2500 evaluate\n\u2502   \u2502   \u2514\u2500\u2500 evaluate_model.py\n\u2502   \u251c\u2500\u2500 parameters.json\n\u2502   \u251c\u2500\u2500 register\n\u2502   \u2502   \u2514\u2500\u2500 register_model.py\n\u2502   \u251c\u2500\u2500 scoring\n\u2502   \u2502   \u251c\u2500\u2500 deployment_config_aci.yml\n\u2502   \u2502   \u251c\u2500\u2500 deployment_config_aks.yml\n\u2502   \u2502   \u251c\u2500\u2500 inference_config.yml\n\u2502   \u2502   \u251c\u2500\u2500 parallel_batchscore.py\n\u2502   \u2502   \u251c\u2500\u2500 parallel_batchscore_copyoutput.py\n\u2502   \u2502   \u251c\u2500\u2500 score.py\n\u2502   \u2502   \u251c\u2500\u2500 scoreA.py\n\u2502   \u2502   \u2514\u2500\u2500 scoreB.py\n\u2502   \u251c\u2500\u2500 training\n\u2502   \u2502   \u251c\u2500\u2500 R\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 r_train.r\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 train_with_r.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 train_with_r_on_databricks.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 weight_data.csv\n\u2502   \u2502   \u251c\u2500\u2500 test_train.py\n\u2502   \u2502   \u251c\u2500\u2500 train.py\n\u2502   \u2502   \u2514\u2500\u2500 train_aml.py\n\u2502   \u2514\u2500\u2500 util\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 model_helper.py\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 canary_ab_deployment.md\n\u2502   \u251c\u2500\u2500 code_description.md\n\u2502   \u251c\u2500\u2500 custom_container.md\n\u2502   \u251c\u2500\u2500 custom_model.md\n\u2502   \u251c\u2500\u2500 development_setup.md\n\u2502   \u251c\u2500\u2500 getting_started.md\n\u2502   \u2514\u2500\u2500 images\n\u2502       \u251c\u2500\u2500 ADO-CD-pipeline-to-webapp.png\n\u2502       \u251c\u2500\u2500 aci-in-azure-portal.png\n\u2502       \u251c\u2500\u2500 appservice-webapp-deploymentcenter.png\n\u2502       \u251c\u2500\u2500 batch-child-run-scoringstep.png\n\u2502       \u251c\u2500\u2500 batchscoring-ci-result.png\n\u2502       \u251c\u2500\u2500 batchscoring-pipeline.png\n\u2502       \u251c\u2500\u2500 build-connect.png\n\u2502       \u251c\u2500\u2500 ci-build-pipeline-configure.png\n\u2502       \u251c\u2500\u2500 container-registry-webapp-image.png\n\u2502       \u251c\u2500\u2500 create-rm-service-connection.png\n\u2502       \u251c\u2500\u2500 created-resources.png\n\u2502       \u251c\u2500\u2500 custom-container-variables.png\n\u2502       \u251c\u2500\u2500 deploy-aci.png\n\u2502       \u251c\u2500\u2500 deploy-aks.png\n\u2502       \u251c\u2500\u2500 library_variable_groups.png\n\u2502       \u251c\u2500\u2500 ml-lifecycle.png\n\u2502       \u251c\u2500\u2500 ml-ws-svc-connection.png\n\u2502       \u251c\u2500\u2500 model-artifact-cd-trigger.png\n\u2502       \u251c\u2500\u2500 model-artifact.png\n\u2502       \u251c\u2500\u2500 model-deploy-configure.png\n\u2502       \u251c\u2500\u2500 model-deploy-get-artifact-logs.png\n\u2502       \u251c\u2500\u2500 model-deploy-result.png\n\u2502       \u251c\u2500\u2500 model-train-register-artifacts.png\n\u2502       \u251c\u2500\u2500 model-train-register.png\n\u2502       \u251c\u2500\u2500 multi-stage-aci-aks.png\n\u2502       \u251c\u2500\u2500 multi-stage-aci.png\n\u2502       \u251c\u2500\u2500 multi-stage-webapp.png\n\u2502       \u251c\u2500\u2500 release-task-createimage.PNG\n\u2502       \u251c\u2500\u2500 release-task-webappdeploy.PNG\n\u2502       \u251c\u2500\u2500 release-webapp-pipeline.PNG\n\u2502       \u251c\u2500\u2500 run-iac-pipeline.png\n\u2502       \u251c\u2500\u2500 scoring_image.png\n\u2502       \u251c\u2500\u2500 select-iac-pipeline.png\n\u2502       \u251c\u2500\u2500 trained-model.png\n\u2502       \u2514\u2500\u2500 training-pipeline.png\n\u251c\u2500\u2500 environment_setup\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 arm-templates\n\u2502   \u2502   \u2514\u2500\u2500 cloud-environment.json\n\u2502   \u251c\u2500\u2500 docker-image-pipeline.yml\n\u2502   \u251c\u2500\u2500 iac-create-environment-pipeline-arm.yml\n\u2502   \u251c\u2500\u2500 iac-create-environment-pipeline-tf.yml\n\u2502   \u251c\u2500\u2500 iac-remove-environment-pipeline.yml\n\u2502   \u251c\u2500\u2500 install_requirements.sh\n\u2502   \u2514\u2500\u2500 tf-templates\n\u2502       \u251c\u2500\u2500 backend.tf\n\u2502       \u2514\u2500\u2500 main.tf\n\u251c\u2500\u2500 experimentation\n\u2502   \u251c\u2500\u2500 Diabetes Ridge Regression Experimentation Pipeline.ipynb\n\u2502   \u251c\u2500\u2500 Diabetes Ridge Regression Parameter Experimentation.ipynb\n\u2502   \u251c\u2500\u2500 Diabetes Ridge Regression Scoring.ipynb\n\u2502   \u2514\u2500\u2500 Diabetes Ridge Regression Training.ipynb\n\u2514\u2500\u2500 ml_service\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 pipelines\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 diabetes_regression_build_parallel_batchscore_pipeline.py\n    \u2502   \u251c\u2500\u2500 diabetes_regression_build_train_pipeline.py\n    \u2502   \u251c\u2500\u2500 diabetes_regression_build_train_pipeline_with_r.py\n    \u2502   \u251c\u2500\u2500 diabetes_regression_build_train_pipeline_with_r_on_dbricks.py\n    \u2502   \u251c\u2500\u2500 load_sample_data.py\n    \u2502   \u251c\u2500\u2500 run_parallel_batchscore_pipeline.py\n    \u2502   \u2514\u2500\u2500 run_train_pipeline.py\n    \u2514\u2500\u2500 util\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 attach_compute.py\n        \u251c\u2500\u2500 create_scoring_image.py\n        \u251c\u2500\u2500 create_scoring_image.sh\n        \u251c\u2500\u2500 env_variables.py\n        \u251c\u2500\u2500 manage_environment.py\n        \u2514\u2500\u2500 smoke_test_scoring_service.py\n</code></pre>"},{"location":"misc/MLOpsPython/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python 3.7.5 (specified in <code>Dockerfile</code>)</li> <li>Uses Conda for environment and dependency management</li> </ul>"},{"location":"misc/MLOpsPython/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>Azure CLI: For Azure cloud services</li> <li>Conda: For environment management and dependency installation</li> </ul>"},{"location":"misc/MLOpsPython/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Docker: Containerization (Dockerfile and docker-image-pipeline.yml)</li> <li>Uses <code>conda/miniconda3</code> as the base image</li> <li>Installs Python 3.7.5 and dependencies from <code>ci_dependencies.yml</code></li> <li>Azure Pipelines: For CI/CD (<code>.pipelines/</code> directory)</li> <li>Infrastructure as Code (IaC):</li> <li>ARM Templates: For Azure Resource Manager deployments</li> <li>Terraform: For infrastructure provisioning (implied by <code>tf-templates/</code> directory)</li> </ul>"},{"location":"misc/MLOpsPython/#project-structure","title":"Project Structure","text":"<ul> <li>ml_service/: Contains ML pipelines and utilities</li> <li>experimentation/: Jupyter notebooks for ML experimentation</li> <li>environment_setup/: Docker, IaC, and environment configuration</li> <li>docs/: Project documentation</li> <li>diabetes_regression/: Example ML project</li> <li>charts/: Likely for Helm charts or similar</li> <li>data/: Data storage</li> <li>bootstrap/: Initialization scripts or configurations</li> </ul>"},{"location":"misc/MLOpsPython/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>Azure Cloud: The project is designed to work with Azure services (implied by ARM templates and Azure CLI)</li> <li>Jupyter Notebooks: Used for ML experimentation and training</li> </ul>"},{"location":"misc/cml/","title":"Iterative CML","text":"<p>Source: https://github.com/iterative/cml  Version: a3a66c7   </p> <pre><code>\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 demo.tf\n\u2502   \u251c\u2500\u2500 logo.pdf\n\u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u251c\u2500\u2500 test.md\n\u2502   \u251c\u2500\u2500 test.svg\n\u2502   \u251c\u2500\u2500 vega-lite.json\n\u2502   \u2514\u2500\u2500 watermark.svg\n\u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500 cml\n\u2502   \u2502   \u251c\u2500\u2500 asset\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 publish.e2e.test.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 publish.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 publish.test.js\n\u2502   \u2502   \u251c\u2500\u2500 asset.js\n\u2502   \u2502   \u251c\u2500\u2500 check\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.e2e.test.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 create.test.js\n\u2502   \u2502   \u251c\u2500\u2500 check.js\n\u2502   \u2502   \u251c\u2500\u2500 comment\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.e2e.test.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.test.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 update.js\n\u2502   \u2502   \u251c\u2500\u2500 comment.js\n\u2502   \u2502   \u251c\u2500\u2500 pr\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 create.e2e.test.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 create.js\n\u2502   \u2502   \u251c\u2500\u2500 pr.js\n\u2502   \u2502   \u251c\u2500\u2500 repo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 prepare.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 prepare.test.js\n\u2502   \u2502   \u251c\u2500\u2500 repo.js\n\u2502   \u2502   \u251c\u2500\u2500 runner\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 launch.e2e.test.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 launch.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 launch.test.js\n\u2502   \u2502   \u251c\u2500\u2500 runner.js\n\u2502   \u2502   \u251c\u2500\u2500 tensorboard\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 connect.e2e.test.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 connect.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 connect.test.js\n\u2502   \u2502   \u251c\u2500\u2500 tensorboard.js\n\u2502   \u2502   \u251c\u2500\u2500 workflow\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rerun.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rerun.test.js\n\u2502   \u2502   \u2514\u2500\u2500 workflow.js\n\u2502   \u251c\u2500\u2500 cml.js\n\u2502   \u251c\u2500\u2500 cml.test.js\n\u2502   \u2514\u2500\u2500 legacy\n\u2502       \u251c\u2500\u2500 commands\n\u2502       \u2502   \u251c\u2500\u2500 ci.js\n\u2502       \u2502   \u251c\u2500\u2500 publish.js\n\u2502       \u2502   \u251c\u2500\u2500 rerun-workflow.js\n\u2502       \u2502   \u251c\u2500\u2500 send-comment.js\n\u2502       \u2502   \u251c\u2500\u2500 send-github-check.js\n\u2502       \u2502   \u2514\u2500\u2500 tensorboard-dev.js\n\u2502       \u251c\u2500\u2500 deprecation.js\n\u2502       \u251c\u2500\u2500 link.e2e.test.js\n\u2502       \u2514\u2500\u2500 link.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 analytics.e2e.test.js\n\u2502   \u251c\u2500\u2500 analytics.js\n\u2502   \u251c\u2500\u2500 cml.e2e.test.js\n\u2502   \u251c\u2500\u2500 cml.js\n\u2502   \u251c\u2500\u2500 commenttarget.js\n\u2502   \u251c\u2500\u2500 commenttarget.test.js\n\u2502   \u251c\u2500\u2500 drivers\n\u2502   \u2502   \u251c\u2500\u2500 bitbucket_cloud.e2e.test.js\n\u2502   \u2502   \u251c\u2500\u2500 bitbucket_cloud.js\n\u2502   \u2502   \u251c\u2500\u2500 github.e2e.test.js\n\u2502   \u2502   \u251c\u2500\u2500 github.js\n\u2502   \u2502   \u251c\u2500\u2500 gitlab.e2e.test.js\n\u2502   \u2502   \u2514\u2500\u2500 gitlab.js\n\u2502   \u251c\u2500\u2500 logger.js\n\u2502   \u251c\u2500\u2500 terraform.js\n\u2502   \u251c\u2500\u2500 terraform.test.js\n\u2502   \u251c\u2500\u2500 utils.js\n\u2502   \u251c\u2500\u2500 utils.test.js\n\u2502   \u251c\u2500\u2500 watermark.js\n\u2502   \u2514\u2500\u2500 watermark.test.js\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 proxy.js\n    \u251c\u2500\u2500 setup.js\n    \u2514\u2500\u2500 teardown.js\n</code></pre>"},{"location":"misc/cml/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Node.js (&gt;=16.0.0, specified in <code>package.json</code>)</li> <li>Uses npm for package management</li> </ul>"},{"location":"misc/cml/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>@actions/core, @actions/github: For GitHub Actions integration</li> <li>@octokit/core, @octokit/graphql, @octokit/rest: For GitHub API interactions</li> <li>node-fetch, node-ssh: For HTTP requests and SSH operations</li> <li>simple-git: For Git operations</li> <li>winston: For logging</li> <li>yargs: For CLI argument parsing</li> </ul>"},{"location":"misc/cml/#development-quality-tools","title":"Development &amp; Quality Tools","text":"<ul> <li>eslint: For linting</li> <li>prettier: For code formatting</li> <li>jest: For testing</li> <li>husky: For Git hooks</li> <li>lint-staged: For running linters on staged files</li> </ul>"},{"location":"misc/cml/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Docker: Containerization (Dockerfile and .dockerignore)</li> <li>GitHub Actions: For CI/CD (implied by <code>.github/</code> directory)</li> </ul>"},{"location":"misc/cml/#project-structure","title":"Project Structure","text":"<ul> <li>src/: Source code</li> <li>tests/: Test files</li> <li>bin/: Executable scripts</li> <li>assets/: Static assets</li> </ul>"},{"location":"misc/cml/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>GitHub: The project is designed to work with GitHub (implied by GitHub Actions and Octokit)</li> <li>CLI Tool: The project is a CLI tool (<code>cml</code>) for CI/CD in data science and machine learning projects</li> </ul>"},{"location":"misc/zenml/","title":"ZenML","text":"<p>Source: https://github.com/zenml-io/zenml   Version: 876bc70    </p> <pre><code>\u251c\u2500\u2500 CLA.md\n\u251c\u2500\u2500 CODE-OF-CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 RELEASE_NOTES.md\n\u251c\u2500\u2500 ROADMAP.md\n\u251c\u2500\u2500 SECURITY.md\n\u251c\u2500\u2500 alembic.ini\n\u251c\u2500\u2500 docker\n\u2502   \u251c\u2500\u2500 base.Dockerfile\n\u2502   \u251c\u2500\u2500 zenml-dev.Dockerfile\n\u2502   \u251c\u2500\u2500 zenml-quickstart-dev.Dockerfile\n\u2502   \u251c\u2500\u2500 zenml-quickstart.Dockerfile\n\u2502   \u251c\u2500\u2500 zenml-server-dev.Dockerfile\n\u2502   \u2514\u2500\u2500 zenml-server-hf-spaces.Dockerfile\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 _static\n\u2502   \u251c\u2500\u2500 _templates\n\u2502   \u251c\u2500\u2500 book\n\u2502   \u251c\u2500\u2500 link_checker.py\n\u2502   \u251c\u2500\u2500 mkdocs\n\u2502   \u251c\u2500\u2500 mkdocs.yml\n\u2502   \u251c\u2500\u2500 mkdocstrings_helper.py\n\u2502   \u251c\u2500\u2500 mocked_libs.json\n\u2502   \u2514\u2500\u2500 sys_modules_mock.py\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 e2e\n\u2502   \u251c\u2500\u2500 e2e_nlp\n\u2502   \u251c\u2500\u2500 llm_finetuning\n\u2502   \u251c\u2500\u2500 mlops_starter\n\u2502   \u2514\u2500\u2500 quickstart\n\u251c\u2500\u2500 helm\n\u2502   \u251c\u2500\u2500 Chart.yaml\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 values.yaml\n\u251c\u2500\u2500 infra\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u251c\u2500\u2500 gcp\n\u2502   \u2514\u2500\u2500 scripts\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 release-cloudbuild-nightly.yaml\n\u251c\u2500\u2500 release-cloudbuild-preparation.yaml\n\u251c\u2500\u2500 release-cloudbuild.yaml\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 add-docs-warning.py\n\u2502   \u251c\u2500\u2500 add-docs-warning.sh\n\u2502   \u251c\u2500\u2500 add-migration-test-version.sh\n\u2502   \u251c\u2500\u2500 check-alembic-branches.sh\n\u2502   \u251c\u2500\u2500 check-security.sh\n\u2502   \u251c\u2500\u2500 check-spelling.sh\n\u2502   \u251c\u2500\u2500 check_broken_links.py\n\u2502   \u251c\u2500\u2500 check_broken_links.sh\n\u2502   \u251c\u2500\u2500 check_relative_links.py\n\u2502   \u251c\u2500\u2500 clean.sh\n\u2502   \u251c\u2500\u2500 compare_profiles.py\n\u2502   \u251c\u2500\u2500 docstring.sh\n\u2502   \u251c\u2500\u2500 find_orphaned_assets.py\n\u2502   \u251c\u2500\u2500 find_unreferenced_docs.py\n\u2502   \u251c\u2500\u2500 format.sh\n\u2502   \u251c\u2500\u2500 generate-docs.sh\n\u2502   \u251c\u2500\u2500 gitbook_redirect_check.py\n\u2502   \u251c\u2500\u2500 install-dashboard.sh\n\u2502   \u251c\u2500\u2500 install-zenml-dev.sh\n\u2502   \u251c\u2500\u2500 lint.sh\n\u2502   \u251c\u2500\u2500 profile-cli.sh\n\u2502   \u251c\u2500\u2500 redeploy-release-prep-tenant.py\n\u2502   \u251c\u2500\u2500 run-ci-checks.sh\n\u2502   \u251c\u2500\u2500 serve_api_docs.sh\n\u2502   \u251c\u2500\u2500 setup_gitbook_dirs.py\n\u2502   \u251c\u2500\u2500 summarize_docs.py\n\u2502   \u251c\u2500\u2500 sync-gitbook-release-spaces.py\n\u2502   \u251c\u2500\u2500 test-coverage-html.sh\n\u2502   \u251c\u2500\u2500 test-coverage-xml.sh\n\u2502   \u251c\u2500\u2500 test-migrations.sh\n\u2502   \u251c\u2500\u2500 test_integration_pairs.py\n\u2502   \u251c\u2500\u2500 validate-new-version.sh\n\u2502   \u2514\u2500\u2500 verify_flavor_url_valid.py\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 zenml\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u251c\u2500\u2500 harness\n\u2502   \u251c\u2500\u2500 integration\n\u2502   \u251c\u2500\u2500 test-framework-architecture.jpg\n\u2502   \u251c\u2500\u2500 unit\n\u2502   \u2514\u2500\u2500 venv_clone_utils.py\n\u251c\u2500\u2500 trivy-secret.yaml\n\u251c\u2500\u2500 zen-dev\n\u2514\u2500\u2500 zen-test\n</code></pre>"},{"location":"misc/zenml/#programming-language-environment","title":"Programming Language &amp; Environment","text":"<ul> <li>Python (&gt;=3.9, &lt;3.13, specified in <code>pyproject.toml</code>)</li> <li>Uses Poetry for dependency management</li> </ul>"},{"location":"misc/zenml/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>alembic: For database migrations</li> <li>bcrypt, passlib: For password hashing</li> <li>click: For CLI applications</li> <li>cloudpickle: For serialization</li> <li>docker: For containerization</li> <li>gitpython: For Git operations</li> <li>pydantic, pydantic-settings: For data validation and settings management</li> <li>sqlalchemy, sqlalchemy_utils, sqlmodel: For database ORM</li> <li>rich: For terminal formatting and Jupyter integration</li> </ul>"},{"location":"misc/zenml/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>ZenServer: FastAPI, uvicorn, pyjwt, etc.</li> <li>Project Templates: copier, jinja2-time, etc.</li> <li>Cloud Secrets: AWS, GCP, Azure, HashiCorp Vault</li> <li>Cloud Connectors: AWS, GCP, Azure, Kubernetes</li> <li>Artifact Stores: S3, GCS, Azure</li> <li>Orchestrators: Sagemaker, Vertex, AzureML</li> </ul>"},{"location":"misc/zenml/#development-quality-tools","title":"Development &amp; Quality Tools","text":"<ul> <li>bandit: For security linting</li> <li>coverage: For code coverage measurement</li> <li>mypy: For static type checking</li> <li>ruff: For linting and formatting</li> <li>pytest: For testing (with plugins like pytest-mock, pytest-clarity, etc.)</li> <li>mkdocs: For documentation (with plugins like mkdocs-material, mkdocstrings, etc.)</li> </ul>"},{"location":"misc/zenml/#build-task-automation","title":"Build &amp; Task Automation","text":"<ul> <li>Docker: Containerization (Dockerfile and .dockerignore)</li> <li>GitHub Actions: For CI/CD (implied by <code>.github/</code> directory)</li> </ul>"},{"location":"misc/zenml/#project-structure","title":"Project Structure","text":"<ul> <li>src/: Source code</li> <li>tests/: Test files</li> <li>scripts/: Utility scripts</li> <li>docs/: Documentation</li> <li>examples/: Example projects</li> <li>infra/: Infrastructure configurations</li> <li>helm/: Helm charts</li> </ul>"},{"location":"misc/zenml/#other-notable-configurations","title":"Other Notable Configurations","text":"<ul> <li>GitHub: The project is designed to work with GitHub (implied by GitHub Actions)</li> <li>CLI Tool: The project is a CLI tool (<code>zenml</code>) for MLOps and production-ready ML code</li> </ul>"}]}